package com.vpd.courseproject.forum.service;

import com.vpd.courseproject.forum.persistence.dao.IUserDao;
import com.vpd.courseproject.forum.persistence.entity.User;
import com.vpd.courseproject.forum.service.api.IUserService;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Properties;

@Service
public class UserService implements IUserService {
    private static final Logger logger = Logger.getLogger(UserService.class);
    private Properties properties = new Properties();
    private IUserDao userDao;

    public UserService(IUserDao userDao) {
        this.userDao = userDao;
    }

    public User createUser(String login, String pass, String name, String email, String phone, String description) {
        User newUser = new User(login, pass, email, name, phone, description, User.Role.USER);
        userDao.save(newUser);
        logger.info("Registered a new user - " + login);
        return newUser;
    }


    public void changeRole(String login, String role) {
        User user = userDao.findById(login).orElse(null);
        assert user != null;
        user.setRole(User.Role.valueOf(role));
        userDao.save(user);
    }

    public void deleteUser(String login) {
        User user = userDao.findById(login).orElse(null);
        assert user != null;
        user.setDeleted(true);
        userDao.save(user);
        logger.info("User '" + login + "' deleted");
    }

    public void lockOrUnlockUser(String loginBlocker, String login, String reasonForBlocking) {
        User user = userDao.findById(login).orElse(null);
            assert user != null;
        if (reasonForBlocking != null) {
            user.setReasonForBlocking(reasonForBlocking);
            logger.info("User '" + loginBlocker + "' banned user '" + user.getLogin()
                    + "' for a reason '" + user.getReasonForBlocking() + "'");
        } else {
            user.setReasonForBlocking(null);
            logger.info("User '" + loginBlocker + "' unbanned user '" + user.getLogin() + "'");
        }
        userDao.save(user);
    }

    public User getUserByLogin(String login) {
        return userDao.findById(login).orElse(null);
    }

    public User getUserByEmail(String email) {
        return userDao.findUserByEmail(email);
    }

    public List<User> getAllUsers() {
        List<User> users = (List<User>) userDao.findAll();
        Collections.sort(users);
        return users;
    }

    public boolean createAdministrator(){
        try {
            properties.load(Objects.requireNonNull(UserService.class.getClassLoader().getResourceAsStream("forum.properties")));
        } catch (IOException e) {
            return false;
        }
        if (!userDao.existsById(properties.getProperty("login"))) {
                User user = new User();
                user.setLogin(properties.getProperty("login"));
                user.setPassword(properties.getProperty("password"));
                user.setEmail(properties.getProperty("email"));
                user.setName(properties.getProperty("name"));
                user.setPhone(properties.getProperty("phone"));
                user.setDescription(properties.getProperty("description"));
                user.setRole(User.Role.ADMIN);
                userDao.save(user);
                logger.info("User '" + user.getLogin() + "' autogenerated");
                return true;
            } else {
                return false;
            }
        }


    public boolean changePassword(String login, String oldPassword, String newPassword) {
        User user = userDao.findById(login).orElse(null);
        assert user != null;
        if (user.getPassword().equals(oldPassword)) {
            user.setPassword(newPassword);
            userDao.save(user);
            logger.info("User '" + user.getLogin() + "' changed his password");
            return true;
        } else {
            return false;
        }
    }

    public void editProfile(String login, String newName, String newPhone, String newDescription) {
        User user = userDao.findById(login).orElse(null);
        assert user != null;
        user.setName(newName);
        user.setPhone(newPhone);
        user.setDescription(newDescription);
        userDao.save(user);
    }

    public User restoreUser(String login) {
        User user = userDao.findById(login).orElse(null);
        assert user != null;
        user.setDeleted(false);
        userDao.save(user);
        logger.info("User '" + login + "' is restored");
        return user;
    }
}
